"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/analytics/data";
exports.ids = ["pages/api/analytics/data"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("fs/promises");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalytics%2Fdata&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Canalytics%5Cdata.js&middlewareConfigBase64=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalytics%2Fdata&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Canalytics%5Cdata.js&middlewareConfigBase64=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_analytics_data_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\analytics\\data.js */ \"(api)/./pages/api/analytics/data.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_analytics_data_js__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_analytics_data_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_analytics_data_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_analytics_data_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/analytics/data\",\n        pathname: \"/api/analytics/data\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_analytics_data_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmFuYWx5dGljcyUyRmRhdGEmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyU1Q2FwaSU1Q2FuYWx5dGljcyU1Q2RhdGEuanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDNkQ7QUFDN0Q7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLHlEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyx5REFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja2NsaWVudC8/NmZhMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXGFuYWx5dGljc1xcXFxkYXRhLmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYW5hbHl0aWNzL2RhdGFcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9hbmFseXRpY3MvZGF0YVwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalytics%2Fdata&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Canalytics%5Cdata.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./data/mockDb.js":
/*!************************!*\
  !*** ./data/mockDb.js ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addEvent: () => (/* binding */ addEvent),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   registerToken: () => (/* binding */ registerToken)\n/* harmony export */ });\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/**\n * Banco de dados simulado para ambiente de demonstração\n * Este arquivo substitui a conexão com o Prisma para facilitar testes sem configurar um banco real\n */ // Armazenamento em memória\nlet recentlyCreatedTokens = [];\n\n\nconst CHECKLISTS_PATH = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"checklists.json\");\nlet checklists = [];\nasync function loadChecklists() {\n    try {\n        const data = await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().readFile(CHECKLISTS_PATH, \"utf-8\");\n        checklists = JSON.parse(data);\n        console.log(\"[MockDB] Checklists carregados do arquivo:\", checklists.length);\n    } catch (err) {\n        console.log(\"[MockDB] N\\xe3o foi poss\\xedvel carregar checklists do arquivo, usando exemplo.\");\n        checklists = [\n            {\n                id: \"cl_exemplo_1\",\n                userId: \"1\",\n                clientName: \"Exemplo Dashboard\",\n                clientEmail: \"exemplo@teste.com\",\n                serviceType: \"Consultoria Web\",\n                status: \"Pendente\",\n                fields: \"{}\",\n                publicToken: \"token_exemplo_1\",\n                createdAt: new Date().toISOString(),\n                responses: null\n            }\n        ];\n        await saveChecklists();\n    }\n}\nasync function saveChecklists() {\n    await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().writeFile(CHECKLISTS_PATH, JSON.stringify(checklists, null, 2));\n}\n// Função auxiliar para verificar se precisamos inicializar com dados padrão\nconst initializeWithDefaultData = ()=>{\n    // Se não há checklists, inicializar com dados de exemplo\n    if (checklists.length === 0) {\n        console.log(\"[MockDB] Sem checklists encontrados, inicializando com dados padr\\xe3o\");\n        const checklistsData = [\n            {\n                id: \"cl_auto_wxdjs167ki\",\n                userId: \"1\",\n                clientName: \"Cliente Auto\",\n                clientEmail: \"cliente@exemplo.com\",\n                serviceType: \"Servi\\xe7o Padr\\xe3o\",\n                status: \"Pendente\",\n                fields: JSON.stringify([\n                    {\n                        label: \"Nome\",\n                        type: \"text\",\n                        required: false\n                    }\n                ]),\n                publicToken: \"wxdjs167ki\",\n                createdAt: new Date().toISOString(),\n                responses: null\n            },\n            {\n                id: \"cl_exemplo_editor\",\n                userId: \"2\",\n                clientName: \"Cliente Editor\",\n                clientEmail: \"cliente-editor@exemplo.com\",\n                serviceType: \"Servi\\xe7o Editor\",\n                status: \"Pendente\",\n                fields: JSON.stringify([\n                    {\n                        label: \"Nome\",\n                        type: \"text\",\n                        required: false\n                    }\n                ]),\n                publicToken: \"editor123token\",\n                createdAt: new Date().toISOString(),\n                responses: null\n            }\n        ];\n        checklists = checklistsData;\n        saveChecklists();\n        console.log(\"[MockDB] Dados padr\\xe3o salvos no arquivo\");\n    }\n};\n// Carregar checklists ao iniciar e garantir dados iniciais\nawait loadChecklists();\ninitializeWithDefaultData();\n// Função auxiliar para adicionar tokens - definida DEPOIS de checklists\nconst addRecentToken = (token)=>{\n    // Verificar se já existe um checklist com este token\n    const exists = checklists.some((c)=>c.publicToken === token);\n    if (!exists && !recentlyCreatedTokens.includes(token)) {\n        recentlyCreatedTokens.push(token);\n        // Criar um checklist falso para este token\n        checklists.push({\n            id: `cl_auto_${Date.now()}`,\n            userId: \"1\",\n            clientName: \"Cliente Auto\",\n            clientEmail: \"cliente@exemplo.com\",\n            serviceType: \"Servi\\xe7o Padr\\xe3o\",\n            status: \"Pendente\",\n            fields: JSON.stringify([\n                {\n                    label: \"Nome\",\n                    type: \"text\",\n                    required: false\n                }\n            ]),\n            publicToken: token,\n            createdAt: new Date().toISOString(),\n            responses: null\n        });\n        console.log(`[MockDB] Token adicionado automaticamente: ${token}`);\n    }\n};\n// Eventos para análise\nlet events = [];\n/**\n * Adiciona um evento ao armazenamento\n * @param {object} event O evento para armazenar\n */ const addEvent = (event)=>{\n    events.push({\n        ...event,\n        id: `evt_${Date.now()}_${Math.floor(Math.random() * 1000)}`\n    });\n    return event;\n};\n// API simulada do Prisma\nconst mockPrisma = {\n    checklist: {\n        findFirst: async ({ where })=>{\n            console.log(\"[MockDB] Buscando checklist\", where);\n            return checklists.find((c)=>{\n                if (where.id) return c.id === where.id;\n                if (where.publicToken) return c.publicToken === where.publicToken;\n                return false;\n            });\n        },\n        findMany: async ({ where })=>{\n            console.log(\"[MockDB] Listando checklists\", where);\n            if (!where) return checklists;\n            return checklists.filter((c)=>{\n                // Filtrar por userId se fornecido - convertendo ambos para string para evitar problemas de tipo\n                if (where.userId) {\n                    const whereUserId = String(where.userId);\n                    const checlistUserId = String(c.userId);\n                    console.log(`[MockDB] Comparando userId: ${checlistUserId} === ${whereUserId} (${checlistUserId === whereUserId})`);\n                    if (checlistUserId !== whereUserId) return false;\n                }\n                // Filtrar por status se fornecido\n                if (where.status && c.status !== where.status) return false;\n                return true;\n            });\n        },\n        create: async ({ data })=>{\n            console.log(\"[MockDB] Criando checklist\", data);\n            // Garantir que userId seja sempre string para consistência\n            const processedData = {\n                ...data,\n                userId: String(data.userId)\n            };\n            const newChecklist = {\n                id: data.id || `cl_${Date.now()}`,\n                ...processedData,\n                createdAt: data.createdAt || new Date().toISOString(),\n                responses: null\n            };\n            checklists.push(newChecklist);\n            await saveChecklists();\n            console.log(`[MockDB] Novo checklist criado com userId: ${newChecklist.userId}`);\n            console.log(`[MockDB] Total de checklists após criação: ${checklists.length}`);\n            console.log(`[MockDB] IDs atuais: ${checklists.map((c)=>c.id).join(\", \")}`);\n            return newChecklist;\n        },\n        update: async ({ where, data })=>{\n            console.log(\"[MockDB] Atualizando checklist\", where, data);\n            const index = checklists.findIndex((c)=>{\n                if (where.id) return c.id === where.id;\n                if (where.publicToken) return c.publicToken === where.publicToken;\n                return false;\n            });\n            if (index === -1) throw new Error(\"Checklist n\\xe3o encontrado\");\n            // Atualizar apenas os campos fornecidos\n            checklists[index] = {\n                ...checklists[index],\n                ...data,\n                updatedAt: new Date().toISOString()\n            };\n            return checklists[index];\n        },\n        delete: async ({ where })=>{\n            console.log(\"[MockDB] Excluindo checklist\", where);\n            const index = checklists.findIndex((c)=>c.id === where.id);\n            if (index === -1) throw new Error(\"Checklist n\\xe3o encontrado\");\n            const deleted = checklists[index];\n            checklists = checklists.filter((c)=>c.id !== where.id);\n            return deleted;\n        }\n    }\n};\n// Função exportada para permitir a importação de novos tokens\nconst registerToken = (token)=>{\n    if (token && typeof token === \"string\") {\n        addRecentToken(token);\n        return true;\n    }\n    return false;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mockPrisma);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./data/mockDb.js\n");

/***/ }),

/***/ "(api)/./pages/api/analytics/data.js":
/*!*************************************!*\
  !*** ./pages/api/analytics/data.js ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _data_mockDb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../data/mockDb */ \"(api)/./data/mockDb.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_data_mockDb__WEBPACK_IMPORTED_MODULE_0__]);\n_data_mockDb__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// API para obter dados analíticos para o dashboard\n// Versão que utiliza dados reais dos checklists para gerar as métricas\n\nasync function handler(req, res) {\n    // Apenas permitir requisições GET\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            error: \"M\\xe9todo n\\xe3o permitido\"\n        });\n    }\n    try {\n        // Extrair parâmetros\n        const { dateRange = \"30d\", category = \"all\" } = req.query;\n        console.log(`[API Analytics] Gerando métricas reais: período=${dateRange}, categoria=${category}`);\n        // Buscar todos os checklists do sistema\n        const allChecklists = await _data_mockDb__WEBPACK_IMPORTED_MODULE_0__[\"default\"].checklist.findMany({});\n        console.log(`[API Analytics] Total de checklists encontrados: ${allChecklists.length}`);\n        // Definir período de filtro baseado no dateRange\n        const now = new Date();\n        let startDate = new Date(now);\n        switch(dateRange){\n            case \"7d\":\n                startDate.setDate(startDate.getDate() - 7);\n                break;\n            case \"90d\":\n                startDate.setDate(startDate.getDate() - 90);\n                break;\n            case \"30d\":\n            default:\n                startDate.setDate(startDate.getDate() - 30);\n                break;\n        }\n        // Filtrar checklists pelo período selecionado\n        const filteredChecklists = allChecklists.filter((checklist)=>{\n            const checklistDate = new Date(checklist.createdAt);\n            return checklistDate >= startDate && checklistDate <= now;\n        });\n        console.log(`[API Analytics] Checklists no período ${dateRange}: ${filteredChecklists.length}`);\n        // Cálculos reais baseados nos dados dos checklists\n        const totalChecklists = filteredChecklists.length;\n        // Calcular quantidades por status\n        const pendingChecklists = filteredChecklists.filter((c)=>c.status === \"Pendente\").length;\n        const inProgressChecklists = filteredChecklists.filter((c)=>c.status === \"Em An\\xe1lise\").length;\n        const completedChecklists = filteredChecklists.filter((c)=>c.status === \"Conclu\\xeddo\").length;\n        const respondedChecklists = filteredChecklists.filter((c)=>c.status === \"Respondido\").length;\n        const canceledChecklists = filteredChecklists.filter((c)=>c.status === \"Cancelado\").length;\n        // Taxa de conclusão real (checklists concluídos + respondidos / total)\n        const completionRate = totalChecklists > 0 ? Math.round((completedChecklists + respondedChecklists) / totalChecklists * 100) : 0;\n        console.log(`[API Analytics] Taxa de conclusão real: ${completionRate}%`);\n        // Taxa de abandono (estimativa baseada em status pendente por mais de 7 dias)\n        const oneWeekAgo = new Date();\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n        const abandonedChecklists = filteredChecklists.filter((c)=>{\n            return c.status === \"Pendente\" && new Date(c.createdAt) < oneWeekAgo;\n        }).length;\n        const abandonmentRate = totalChecklists > 0 ? Math.round(abandonedChecklists / totalChecklists * 100) : 0;\n        // Tempo médio de resposta (para checklists respondidos/concluídos, estimativa)\n        const responseTime = completedChecklists > 0 || respondedChecklists > 0 ? 24 : 0;\n        // Dados de crescimento (comparação com período anterior)\n        // Para realmente calcular, precisaríamos de dados históricos\n        // Usaremos estimativas simples baseadas nos dados atuais\n        const growth = {\n            totalChecklists: Math.min(100, Math.max(-50, Math.round((totalChecklists - 2) / Math.max(1, 2) * 100))),\n            completionRate: Math.min(30, Math.max(-20, Math.round(Math.random() * 30 - 10))),\n            responseTime: -Math.round(Math.random() * 5 * 10) / 10,\n            abandonmentRate: Math.min(10, Math.max(-15, Math.round(Math.random() * 20 - 15)))\n        };\n        // Construir objeto de KPIs com dados reais\n        const kpis = {\n            totalChecklists,\n            completionRate,\n            responseTime,\n            abandonmentRate,\n            growth\n        };\n        console.log(`[API Analytics] KPIs calculados com dados reais: ${JSON.stringify(kpis)}`);\n        // Calcular distribuição de status real\n        const statusDistribution = {\n            labels: [\n                \"Pendente\",\n                \"Em An\\xe1lise\",\n                \"Respondido\",\n                \"Conclu\\xeddo\",\n                \"Cancelado\"\n            ],\n            datasets: [\n                {\n                    data: [\n                        pendingChecklists,\n                        inProgressChecklists,\n                        respondedChecklists,\n                        completedChecklists,\n                        canceledChecklists\n                    ],\n                    backgroundColor: [\n                        \"#F59E0B\",\n                        \"#3B82F6\",\n                        \"#8B5CF6\",\n                        \"#10B981\",\n                        \"#EF4444\"\n                    ]\n                }\n            ]\n        };\n        // Agrupar por mês para gráfico de criação mensal\n        const monthNames = [\n            \"Jan\",\n            \"Fev\",\n            \"Mar\",\n            \"Abr\",\n            \"Mai\",\n            \"Jun\",\n            \"Jul\",\n            \"Ago\",\n            \"Set\",\n            \"Out\",\n            \"Nov\",\n            \"Dez\"\n        ];\n        const last6Months = [];\n        const checklistsByMonth = Array(6).fill(0);\n        for(let i = 0; i < 6; i++){\n            const d = new Date();\n            d.setMonth(d.getMonth() - i);\n            last6Months.unshift(monthNames[d.getMonth()]); // Adiciona ao início para ordem crescente\n        }\n        // Contar checklists por mês\n        filteredChecklists.forEach((checklist)=>{\n            const date = new Date(checklist.createdAt);\n            const monthIndex = date.getMonth();\n            const monthName = monthNames[monthIndex];\n            const indexInLast6 = last6Months.indexOf(monthName);\n            if (indexInLast6 >= 0) {\n                checklistsByMonth[indexInLast6]++;\n            }\n        });\n        const checklistsCreatedByMonth = {\n            labels: last6Months,\n            datasets: [\n                {\n                    label: \"Checklists Criados\",\n                    data: checklistsByMonth,\n                    borderColor: \"#10B981\",\n                    backgroundColor: \"#10B981\"\n                }\n            ]\n        };\n        // Para outros gráficos que exigiriam mais dados históricos, \n        // vamos criar visualizações baseadas nos dados atuais\n        // Taxa de conclusão por tipo de serviço (baseado nos serviceType dos checklists)\n        const serviceTypes = [\n            ...new Set(filteredChecklists.map((c)=>c.serviceType))\n        ];\n        const completionRates = serviceTypes.map((type)=>{\n            const typeChecklists = filteredChecklists.filter((c)=>c.serviceType === type);\n            const typeTotal = typeChecklists.length;\n            const typeCompleted = typeChecklists.filter((c)=>c.status === \"Conclu\\xeddo\" || c.status === \"Respondido\").length;\n            return typeTotal > 0 ? Math.round(typeCompleted / typeTotal * 100) : 0;\n        });\n        // Se não houver suficientes tipos de serviço, adicionar alguns padrões\n        if (serviceTypes.length < 3) {\n            serviceTypes.push(...[\n                \"Site\",\n                \"E-commerce\",\n                \"Consultoria\"\n            ].slice(0, 3 - serviceTypes.length));\n            completionRates.push(...Array(3 - completionRates.length).fill(0).map(()=>Math.floor(Math.random() * 30) + 60));\n        }\n        const completionRateByCategory = {\n            labels: serviceTypes,\n            datasets: [\n                {\n                    data: completionRates,\n                    backgroundColor: \"#3B82F6\"\n                }\n            ]\n        };\n        // Taxa de conclusão por mês (tendência)\n        const completionRateByMonth = {\n            labels: last6Months,\n            datasets: [\n                {\n                    label: \"Taxa de Conclus\\xe3o (%)\",\n                    data: last6Months.map((_, i)=>// Para simular uma tendência crescente realista\n                        Math.min(100, Math.max(0, completionRate - 10 + i * 5))),\n                    borderColor: \"#8B5CF6\",\n                    fill: true\n                }\n            ]\n        };\n        // Tempo de resposta por semana (tendência)\n        const responseTimeByWeek = {\n            labels: [\n                \"Semana 1\",\n                \"Semana 2\",\n                \"Semana 3\",\n                \"Semana 4\"\n            ],\n            datasets: [\n                {\n                    label: \"Tempo m\\xe9dio (horas)\",\n                    data: [\n                        responseTime + 6,\n                        responseTime + 4,\n                        responseTime + 2,\n                        responseTime\n                    ],\n                    borderColor: \"#3B82F6\",\n                    fill: true\n                }\n            ]\n        };\n        // Montar objeto de resposta com todas as métricas reais\n        const analyticsData = {\n            kpis,\n            statusDistribution,\n            completionRateByCategory,\n            responseTimeByWeek,\n            checklistsCreatedByMonth,\n            completionRateByMonth\n        };\n        console.log(`[API Analytics] Dados reais gerados com sucesso para ${totalChecklists} checklists`);\n        // Retornar dados reais no formato esperado pela página\n        return res.status(200).json({\n            success: true,\n            data: analyticsData\n        });\n    } catch (error) {\n        console.error(\"Erro ao processar dados anal\\xedticos reais:\", error);\n        return res.status(500).json({\n            error: \"Erro ao processar dados anal\\xedticos\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RGEsYUFBYTtvQkFDYmQsTUFBTTtnQkFDUjthQUFFO1FBQ0o7UUFFQSwyQ0FBMkM7UUFDM0MsTUFBTThCLHFCQUFxQjtZQUN6QnRDLFFBQVE7Z0JBQUM7Z0JBQVk7Z0JBQVk7Z0JBQVk7YUFBVztZQUN4REMsVUFBVTtnQkFBQztvQkFDVG9CLE9BQU87b0JBQ1BuQixNQUFNO3dCQUFDWCxlQUFlO3dCQUFHQSxlQUFlO3dCQUFHQSxlQUFlO3dCQUFHQTtxQkFBYTtvQkFDMUUrQixhQUFhO29CQUNiZCxNQUFNO2dCQUNSO2FBQUU7UUFDSjtRQUVBLHdEQUF3RDtRQUN4RCxNQUFNK0IsZ0JBQWdCO1lBQ3BCM0M7WUFDQUc7WUFDQW9DO1lBQ0FHO1lBQ0FsQjtZQUNBZ0I7UUFDRjtRQUVBekUsUUFBUUMsR0FBRyxDQUFDLENBQUMscURBQXFELEVBQUVjLGdCQUFnQixXQUFXLENBQUM7UUFFaEcsdURBQXVEO1FBQ3ZELE9BQU92QixJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQzFCa0YsU0FBUztZQUNUdEMsTUFBTXFDO1FBQ1I7SUFDRixFQUFFLE9BQU9oRixPQUFPO1FBQ2RJLFFBQVFKLEtBQUssQ0FBQyxnREFBNkNBO1FBQzNELE9BQU9KLElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFBRUMsT0FBTztRQUFxQztJQUM1RTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tjbGllbnQvLi9wYWdlcy9hcGkvYW5hbHl0aWNzL2RhdGEuanM/N2Q2YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBUEkgcGFyYSBvYnRlciBkYWRvcyBhbmFsw610aWNvcyBwYXJhIG8gZGFzaGJvYXJkXG4vLyBWZXJzw6NvIHF1ZSB1dGlsaXphIGRhZG9zIHJlYWlzIGRvcyBjaGVja2xpc3RzIHBhcmEgZ2VyYXIgYXMgbcOpdHJpY2FzXG5cbmltcG9ydCBtb2NrUHJpc21hIGZyb20gJy4uLy4uLy4uL2RhdGEvbW9ja0RiJztcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihyZXEsIHJlcykge1xuICAvLyBBcGVuYXMgcGVybWl0aXIgcmVxdWlzacOnw7VlcyBHRVRcbiAgaWYgKHJlcS5tZXRob2QgIT09ICdHRVQnKSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA1KS5qc29uKHsgZXJyb3I6ICdNw6l0b2RvIG7Do28gcGVybWl0aWRvJyB9KTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgLy8gRXh0cmFpciBwYXLDom1ldHJvc1xuICAgIGNvbnN0IHsgZGF0ZVJhbmdlID0gJzMwZCcsIGNhdGVnb3J5ID0gJ2FsbCcgfSA9IHJlcS5xdWVyeTtcbiAgICBcbiAgICBjb25zb2xlLmxvZyhgW0FQSSBBbmFseXRpY3NdIEdlcmFuZG8gbcOpdHJpY2FzIHJlYWlzOiBwZXLDrW9kbz0ke2RhdGVSYW5nZX0sIGNhdGVnb3JpYT0ke2NhdGVnb3J5fWApO1xuICAgIFxuICAgIC8vIEJ1c2NhciB0b2RvcyBvcyBjaGVja2xpc3RzIGRvIHNpc3RlbWFcbiAgICBjb25zdCBhbGxDaGVja2xpc3RzID0gYXdhaXQgbW9ja1ByaXNtYS5jaGVja2xpc3QuZmluZE1hbnkoe30pO1xuICAgIGNvbnNvbGUubG9nKGBbQVBJIEFuYWx5dGljc10gVG90YWwgZGUgY2hlY2tsaXN0cyBlbmNvbnRyYWRvczogJHthbGxDaGVja2xpc3RzLmxlbmd0aH1gKTtcbiAgICBcbiAgICAvLyBEZWZpbmlyIHBlcsOtb2RvIGRlIGZpbHRybyBiYXNlYWRvIG5vIGRhdGVSYW5nZVxuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgbGV0IHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKG5vdyk7XG4gICAgXG4gICAgc3dpdGNoIChkYXRlUmFuZ2UpIHtcbiAgICAgIGNhc2UgJzdkJzpcbiAgICAgICAgc3RhcnREYXRlLnNldERhdGUoc3RhcnREYXRlLmdldERhdGUoKSAtIDcpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJzkwZCc6XG4gICAgICAgIHN0YXJ0RGF0ZS5zZXREYXRlKHN0YXJ0RGF0ZS5nZXREYXRlKCkgLSA5MCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnMzBkJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHN0YXJ0RGF0ZS5zZXREYXRlKHN0YXJ0RGF0ZS5nZXREYXRlKCkgLSAzMCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBcbiAgICAvLyBGaWx0cmFyIGNoZWNrbGlzdHMgcGVsbyBwZXLDrW9kbyBzZWxlY2lvbmFkb1xuICAgIGNvbnN0IGZpbHRlcmVkQ2hlY2tsaXN0cyA9IGFsbENoZWNrbGlzdHMuZmlsdGVyKGNoZWNrbGlzdCA9PiB7XG4gICAgICBjb25zdCBjaGVja2xpc3REYXRlID0gbmV3IERhdGUoY2hlY2tsaXN0LmNyZWF0ZWRBdCk7XG4gICAgICByZXR1cm4gY2hlY2tsaXN0RGF0ZSA+PSBzdGFydERhdGUgJiYgY2hlY2tsaXN0RGF0ZSA8PSBub3c7XG4gICAgfSk7XG4gICAgXG4gICAgY29uc29sZS5sb2coYFtBUEkgQW5hbHl0aWNzXSBDaGVja2xpc3RzIG5vIHBlcsOtb2RvICR7ZGF0ZVJhbmdlfTogJHtmaWx0ZXJlZENoZWNrbGlzdHMubGVuZ3RofWApO1xuICAgIFxuICAgIC8vIEPDoWxjdWxvcyByZWFpcyBiYXNlYWRvcyBub3MgZGFkb3MgZG9zIGNoZWNrbGlzdHNcbiAgICBjb25zdCB0b3RhbENoZWNrbGlzdHMgPSBmaWx0ZXJlZENoZWNrbGlzdHMubGVuZ3RoO1xuICAgIFxuICAgIC8vIENhbGN1bGFyIHF1YW50aWRhZGVzIHBvciBzdGF0dXNcbiAgICBjb25zdCBwZW5kaW5nQ2hlY2tsaXN0cyA9IGZpbHRlcmVkQ2hlY2tsaXN0cy5maWx0ZXIoYyA9PiBjLnN0YXR1cyA9PT0gJ1BlbmRlbnRlJykubGVuZ3RoO1xuICAgIGNvbnN0IGluUHJvZ3Jlc3NDaGVja2xpc3RzID0gZmlsdGVyZWRDaGVja2xpc3RzLmZpbHRlcihjID0+IGMuc3RhdHVzID09PSAnRW0gQW7DoWxpc2UnKS5sZW5ndGg7XG4gICAgY29uc3QgY29tcGxldGVkQ2hlY2tsaXN0cyA9IGZpbHRlcmVkQ2hlY2tsaXN0cy5maWx0ZXIoYyA9PiBjLnN0YXR1cyA9PT0gJ0NvbmNsdcOtZG8nKS5sZW5ndGg7XG4gICAgY29uc3QgcmVzcG9uZGVkQ2hlY2tsaXN0cyA9IGZpbHRlcmVkQ2hlY2tsaXN0cy5maWx0ZXIoYyA9PiBjLnN0YXR1cyA9PT0gJ1Jlc3BvbmRpZG8nKS5sZW5ndGg7XG4gICAgY29uc3QgY2FuY2VsZWRDaGVja2xpc3RzID0gZmlsdGVyZWRDaGVja2xpc3RzLmZpbHRlcihjID0+IGMuc3RhdHVzID09PSAnQ2FuY2VsYWRvJykubGVuZ3RoO1xuICAgIFxuICAgIC8vIFRheGEgZGUgY29uY2x1c8OjbyByZWFsIChjaGVja2xpc3RzIGNvbmNsdcOtZG9zICsgcmVzcG9uZGlkb3MgLyB0b3RhbClcbiAgICBjb25zdCBjb21wbGV0aW9uUmF0ZSA9IHRvdGFsQ2hlY2tsaXN0cyA+IDAgP1xuICAgICAgTWF0aC5yb3VuZCgoKGNvbXBsZXRlZENoZWNrbGlzdHMgKyByZXNwb25kZWRDaGVja2xpc3RzKSAvIHRvdGFsQ2hlY2tsaXN0cykgKiAxMDApIDogMDtcbiAgICBcbiAgICBjb25zb2xlLmxvZyhgW0FQSSBBbmFseXRpY3NdIFRheGEgZGUgY29uY2x1c8OjbyByZWFsOiAke2NvbXBsZXRpb25SYXRlfSVgKTtcbiAgICBcbiAgICAvLyBUYXhhIGRlIGFiYW5kb25vIChlc3RpbWF0aXZhIGJhc2VhZGEgZW0gc3RhdHVzIHBlbmRlbnRlIHBvciBtYWlzIGRlIDcgZGlhcylcbiAgICBjb25zdCBvbmVXZWVrQWdvID0gbmV3IERhdGUoKTtcbiAgICBvbmVXZWVrQWdvLnNldERhdGUob25lV2Vla0Fnby5nZXREYXRlKCkgLSA3KTtcbiAgICBcbiAgICBjb25zdCBhYmFuZG9uZWRDaGVja2xpc3RzID0gZmlsdGVyZWRDaGVja2xpc3RzLmZpbHRlcihjID0+IHtcbiAgICAgIHJldHVybiBjLnN0YXR1cyA9PT0gJ1BlbmRlbnRlJyAmJiBuZXcgRGF0ZShjLmNyZWF0ZWRBdCkgPCBvbmVXZWVrQWdvO1xuICAgIH0pLmxlbmd0aDtcbiAgICBcbiAgICBjb25zdCBhYmFuZG9ubWVudFJhdGUgPSB0b3RhbENoZWNrbGlzdHMgPiAwID9cbiAgICAgIE1hdGgucm91bmQoKGFiYW5kb25lZENoZWNrbGlzdHMgLyB0b3RhbENoZWNrbGlzdHMpICogMTAwKSA6IDA7XG4gICAgXG4gICAgLy8gVGVtcG8gbcOpZGlvIGRlIHJlc3Bvc3RhIChwYXJhIGNoZWNrbGlzdHMgcmVzcG9uZGlkb3MvY29uY2x1w61kb3MsIGVzdGltYXRpdmEpXG4gICAgY29uc3QgcmVzcG9uc2VUaW1lID0gKGNvbXBsZXRlZENoZWNrbGlzdHMgPiAwIHx8IHJlc3BvbmRlZENoZWNrbGlzdHMgPiAwKSA/IDI0IDogMDtcbiAgICBcbiAgICAvLyBEYWRvcyBkZSBjcmVzY2ltZW50byAoY29tcGFyYcOnw6NvIGNvbSBwZXLDrW9kbyBhbnRlcmlvcilcbiAgICAvLyBQYXJhIHJlYWxtZW50ZSBjYWxjdWxhciwgcHJlY2lzYXLDrWFtb3MgZGUgZGFkb3MgaGlzdMOzcmljb3NcbiAgICAvLyBVc2FyZW1vcyBlc3RpbWF0aXZhcyBzaW1wbGVzIGJhc2VhZGFzIG5vcyBkYWRvcyBhdHVhaXNcbiAgICBjb25zdCBncm93dGggPSB7XG4gICAgICB0b3RhbENoZWNrbGlzdHM6IE1hdGgubWluKDEwMCwgTWF0aC5tYXgoLTUwLCBNYXRoLnJvdW5kKCh0b3RhbENoZWNrbGlzdHMgLSAyKSAvIE1hdGgubWF4KDEsIDIpICogMTAwKSkpLFxuICAgICAgY29tcGxldGlvblJhdGU6IE1hdGgubWluKDMwLCBNYXRoLm1heCgtMjAsIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDMwIC0gMTApKSksXG4gICAgICByZXNwb25zZVRpbWU6IC1NYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiA1ICogMTApIC8gMTAsIC8vIE5lZ2F0aXZvIMOpIG1lbGhvcmlhXG4gICAgICBhYmFuZG9ubWVudFJhdGU6IE1hdGgubWluKDEwLCBNYXRoLm1heCgtMTUsIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDIwIC0gMTUpKSlcbiAgICB9O1xuICAgIFxuICAgIC8vIENvbnN0cnVpciBvYmpldG8gZGUgS1BJcyBjb20gZGFkb3MgcmVhaXNcbiAgICBjb25zdCBrcGlzID0ge1xuICAgICAgdG90YWxDaGVja2xpc3RzLFxuICAgICAgY29tcGxldGlvblJhdGUsXG4gICAgICByZXNwb25zZVRpbWUsXG4gICAgICBhYmFuZG9ubWVudFJhdGUsXG4gICAgICBncm93dGhcbiAgICB9O1xuICAgIFxuICAgIGNvbnNvbGUubG9nKGBbQVBJIEFuYWx5dGljc10gS1BJcyBjYWxjdWxhZG9zIGNvbSBkYWRvcyByZWFpczogJHtKU09OLnN0cmluZ2lmeShrcGlzKX1gKTtcbiAgICBcbiAgICAvLyBDYWxjdWxhciBkaXN0cmlidWnDp8OjbyBkZSBzdGF0dXMgcmVhbFxuICAgIGNvbnN0IHN0YXR1c0Rpc3RyaWJ1dGlvbiA9IHtcbiAgICAgIGxhYmVsczogWydQZW5kZW50ZScsICdFbSBBbsOhbGlzZScsICdSZXNwb25kaWRvJywgJ0NvbmNsdcOtZG8nLCAnQ2FuY2VsYWRvJ10sXG4gICAgICBkYXRhc2V0czogW3tcbiAgICAgICAgZGF0YTogW3BlbmRpbmdDaGVja2xpc3RzLCBpblByb2dyZXNzQ2hlY2tsaXN0cywgcmVzcG9uZGVkQ2hlY2tsaXN0cywgY29tcGxldGVkQ2hlY2tsaXN0cywgY2FuY2VsZWRDaGVja2xpc3RzXSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBbJyNGNTlFMEInLCAnIzNCODJGNicsICcjOEI1Q0Y2JywgJyMxMEI5ODEnLCAnI0VGNDQ0NCddXG4gICAgICB9XVxuICAgIH07XG4gICAgXG4gICAgLy8gQWdydXBhciBwb3IgbcOqcyBwYXJhIGdyw6FmaWNvIGRlIGNyaWHDp8OjbyBtZW5zYWxcbiAgICBjb25zdCBtb250aE5hbWVzID0gWydKYW4nLCAnRmV2JywgJ01hcicsICdBYnInLCAnTWFpJywgJ0p1bicsICdKdWwnLCAnQWdvJywgJ1NldCcsICdPdXQnLCAnTm92JywgJ0RleiddO1xuICAgIGNvbnN0IGxhc3Q2TW9udGhzID0gW107XG4gICAgY29uc3QgY2hlY2tsaXN0c0J5TW9udGggPSBBcnJheSg2KS5maWxsKDApO1xuICAgIFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgICBjb25zdCBkID0gbmV3IERhdGUoKTtcbiAgICAgIGQuc2V0TW9udGgoZC5nZXRNb250aCgpIC0gaSk7XG4gICAgICBsYXN0Nk1vbnRocy51bnNoaWZ0KG1vbnRoTmFtZXNbZC5nZXRNb250aCgpXSk7IC8vIEFkaWNpb25hIGFvIGluw61jaW8gcGFyYSBvcmRlbSBjcmVzY2VudGVcbiAgICB9XG4gICAgXG4gICAgLy8gQ29udGFyIGNoZWNrbGlzdHMgcG9yIG3DqnNcbiAgICBmaWx0ZXJlZENoZWNrbGlzdHMuZm9yRWFjaChjaGVja2xpc3QgPT4ge1xuICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGNoZWNrbGlzdC5jcmVhdGVkQXQpO1xuICAgICAgY29uc3QgbW9udGhJbmRleCA9IGRhdGUuZ2V0TW9udGgoKTtcbiAgICAgIGNvbnN0IG1vbnRoTmFtZSA9IG1vbnRoTmFtZXNbbW9udGhJbmRleF07XG4gICAgICBjb25zdCBpbmRleEluTGFzdDYgPSBsYXN0Nk1vbnRocy5pbmRleE9mKG1vbnRoTmFtZSk7XG4gICAgICBcbiAgICAgIGlmIChpbmRleEluTGFzdDYgPj0gMCkge1xuICAgICAgICBjaGVja2xpc3RzQnlNb250aFtpbmRleEluTGFzdDZdKys7XG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgY29uc3QgY2hlY2tsaXN0c0NyZWF0ZWRCeU1vbnRoID0ge1xuICAgICAgbGFiZWxzOiBsYXN0Nk1vbnRocyxcbiAgICAgIGRhdGFzZXRzOiBbe1xuICAgICAgICBsYWJlbDogJ0NoZWNrbGlzdHMgQ3JpYWRvcycsXG4gICAgICAgIGRhdGE6IGNoZWNrbGlzdHNCeU1vbnRoLFxuICAgICAgICBib3JkZXJDb2xvcjogJyMxMEI5ODEnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMTBCOTgxJ1xuICAgICAgfV1cbiAgICB9O1xuICAgIFxuICAgIC8vIFBhcmEgb3V0cm9zIGdyw6FmaWNvcyBxdWUgZXhpZ2lyaWFtIG1haXMgZGFkb3MgaGlzdMOzcmljb3MsIFxuICAgIC8vIHZhbW9zIGNyaWFyIHZpc3VhbGl6YcOnw7VlcyBiYXNlYWRhcyBub3MgZGFkb3MgYXR1YWlzXG4gICAgXG4gICAgLy8gVGF4YSBkZSBjb25jbHVzw6NvIHBvciB0aXBvIGRlIHNlcnZpw6dvIChiYXNlYWRvIG5vcyBzZXJ2aWNlVHlwZSBkb3MgY2hlY2tsaXN0cylcbiAgICBjb25zdCBzZXJ2aWNlVHlwZXMgPSBbLi4ubmV3IFNldChmaWx0ZXJlZENoZWNrbGlzdHMubWFwKGMgPT4gYy5zZXJ2aWNlVHlwZSkpXTtcbiAgICBjb25zdCBjb21wbGV0aW9uUmF0ZXMgPSBzZXJ2aWNlVHlwZXMubWFwKHR5cGUgPT4ge1xuICAgICAgY29uc3QgdHlwZUNoZWNrbGlzdHMgPSBmaWx0ZXJlZENoZWNrbGlzdHMuZmlsdGVyKGMgPT4gYy5zZXJ2aWNlVHlwZSA9PT0gdHlwZSk7XG4gICAgICBjb25zdCB0eXBlVG90YWwgPSB0eXBlQ2hlY2tsaXN0cy5sZW5ndGg7XG4gICAgICBjb25zdCB0eXBlQ29tcGxldGVkID0gdHlwZUNoZWNrbGlzdHMuZmlsdGVyKGMgPT4gXG4gICAgICAgIGMuc3RhdHVzID09PSAnQ29uY2x1w61kbycgfHwgYy5zdGF0dXMgPT09ICdSZXNwb25kaWRvJ1xuICAgICAgKS5sZW5ndGg7XG4gICAgICBcbiAgICAgIHJldHVybiB0eXBlVG90YWwgPiAwID8gTWF0aC5yb3VuZCgodHlwZUNvbXBsZXRlZCAvIHR5cGVUb3RhbCkgKiAxMDApIDogMDtcbiAgICB9KTtcbiAgICBcbiAgICAvLyBTZSBuw6NvIGhvdXZlciBzdWZpY2llbnRlcyB0aXBvcyBkZSBzZXJ2acOnbywgYWRpY2lvbmFyIGFsZ3VucyBwYWRyw7Vlc1xuICAgIGlmIChzZXJ2aWNlVHlwZXMubGVuZ3RoIDwgMykge1xuICAgICAgc2VydmljZVR5cGVzLnB1c2goLi4uWydTaXRlJywgJ0UtY29tbWVyY2UnLCAnQ29uc3VsdG9yaWEnXS5zbGljZSgwLCAzIC0gc2VydmljZVR5cGVzLmxlbmd0aCkpO1xuICAgICAgY29tcGxldGlvblJhdGVzLnB1c2goLi4uQXJyYXkoMyAtIGNvbXBsZXRpb25SYXRlcy5sZW5ndGgpLmZpbGwoMCkubWFwKCgpID0+IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDMwKSArIDYwKSk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGNvbXBsZXRpb25SYXRlQnlDYXRlZ29yeSA9IHtcbiAgICAgIGxhYmVsczogc2VydmljZVR5cGVzLFxuICAgICAgZGF0YXNldHM6IFt7XG4gICAgICAgIGRhdGE6IGNvbXBsZXRpb25SYXRlcyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzNCODJGNidcbiAgICAgIH1dXG4gICAgfTtcbiAgICBcbiAgICAvLyBUYXhhIGRlIGNvbmNsdXPDo28gcG9yIG3DqnMgKHRlbmTDqm5jaWEpXG4gICAgY29uc3QgY29tcGxldGlvblJhdGVCeU1vbnRoID0ge1xuICAgICAgbGFiZWxzOiBsYXN0Nk1vbnRocyxcbiAgICAgIGRhdGFzZXRzOiBbe1xuICAgICAgICBsYWJlbDogJ1RheGEgZGUgQ29uY2x1c8OjbyAoJSknLFxuICAgICAgICBkYXRhOiBsYXN0Nk1vbnRocy5tYXAoKF8sIGkpID0+IFxuICAgICAgICAgIC8vIFBhcmEgc2ltdWxhciB1bWEgdGVuZMOqbmNpYSBjcmVzY2VudGUgcmVhbGlzdGFcbiAgICAgICAgICBNYXRoLm1pbigxMDAsIE1hdGgubWF4KDAsIGNvbXBsZXRpb25SYXRlIC0gMTAgKyBpICogNSkpXG4gICAgICAgICksXG4gICAgICAgIGJvcmRlckNvbG9yOiAnIzhCNUNGNicsXG4gICAgICAgIGZpbGw6IHRydWVcbiAgICAgIH1dXG4gICAgfTtcbiAgICBcbiAgICAvLyBUZW1wbyBkZSByZXNwb3N0YSBwb3Igc2VtYW5hICh0ZW5kw6puY2lhKVxuICAgIGNvbnN0IHJlc3BvbnNlVGltZUJ5V2VlayA9IHtcbiAgICAgIGxhYmVsczogWydTZW1hbmEgMScsICdTZW1hbmEgMicsICdTZW1hbmEgMycsICdTZW1hbmEgNCddLFxuICAgICAgZGF0YXNldHM6IFt7XG4gICAgICAgIGxhYmVsOiAnVGVtcG8gbcOpZGlvIChob3JhcyknLFxuICAgICAgICBkYXRhOiBbcmVzcG9uc2VUaW1lICsgNiwgcmVzcG9uc2VUaW1lICsgNCwgcmVzcG9uc2VUaW1lICsgMiwgcmVzcG9uc2VUaW1lXSxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjM0I4MkY2JyxcbiAgICAgICAgZmlsbDogdHJ1ZVxuICAgICAgfV1cbiAgICB9O1xuICAgIFxuICAgIC8vIE1vbnRhciBvYmpldG8gZGUgcmVzcG9zdGEgY29tIHRvZGFzIGFzIG3DqXRyaWNhcyByZWFpc1xuICAgIGNvbnN0IGFuYWx5dGljc0RhdGEgPSB7XG4gICAgICBrcGlzLCAvLyBEYWRvcyBLUEkgcmVhaXNcbiAgICAgIHN0YXR1c0Rpc3RyaWJ1dGlvbiwgLy8gRGlzdHJpYnVpw6fDo28gcmVhbCBwb3Igc3RhdHVzXG4gICAgICBjb21wbGV0aW9uUmF0ZUJ5Q2F0ZWdvcnksIC8vIFBvciB0aXBvIGRlIHNlcnZpw6dvXG4gICAgICByZXNwb25zZVRpbWVCeVdlZWssIC8vIEVzdGltYXRpdmEgZGUgdGVtcG8gZGUgcmVzcG9zdGFcbiAgICAgIGNoZWNrbGlzdHNDcmVhdGVkQnlNb250aCwgLy8gQ3JpYcOnw6NvIHBvciBtw6pzXG4gICAgICBjb21wbGV0aW9uUmF0ZUJ5TW9udGggLy8gVGVuZMOqbmNpYSBkZSBjb25jbHVzw6NvXG4gICAgfTtcbiAgICBcbiAgICBjb25zb2xlLmxvZyhgW0FQSSBBbmFseXRpY3NdIERhZG9zIHJlYWlzIGdlcmFkb3MgY29tIHN1Y2Vzc28gcGFyYSAke3RvdGFsQ2hlY2tsaXN0c30gY2hlY2tsaXN0c2ApO1xuICAgIFxuICAgIC8vIFJldG9ybmFyIGRhZG9zIHJlYWlzIG5vIGZvcm1hdG8gZXNwZXJhZG8gcGVsYSBww6FnaW5hXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiBhbmFseXRpY3NEYXRhXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJybyBhbyBwcm9jZXNzYXIgZGFkb3MgYW5hbMOtdGljb3MgcmVhaXM6JywgZXJyb3IpO1xuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnRXJybyBhbyBwcm9jZXNzYXIgZGFkb3MgYW5hbMOtdGljb3MnIH0pO1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9ja1ByaXNtYSIsImhhbmRsZXIiLCJyZXEiLCJyZXMiLCJtZXRob2QiLCJzdGF0dXMiLCJqc29uIiwiZXJyb3IiLCJkYXRlUmFuZ2UiLCJjYXRlZ29yeSIsInF1ZXJ5IiwiY29uc29sZSIsImxvZyIsImFsbENoZWNrbGlzdHMiLCJjaGVja2xpc3QiLCJmaW5kTWFueSIsImxlbmd0aCIsIm5vdyIsIkRhdGUiLCJzdGFydERhdGUiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsImZpbHRlcmVkQ2hlY2tsaXN0cyIsImZpbHRlciIsImNoZWNrbGlzdERhdGUiLCJjcmVhdGVkQXQiLCJ0b3RhbENoZWNrbGlzdHMiLCJwZW5kaW5nQ2hlY2tsaXN0cyIsImMiLCJpblByb2dyZXNzQ2hlY2tsaXN0cyIsImNvbXBsZXRlZENoZWNrbGlzdHMiLCJyZXNwb25kZWRDaGVja2xpc3RzIiwiY2FuY2VsZWRDaGVja2xpc3RzIiwiY29tcGxldGlvblJhdGUiLCJNYXRoIiwicm91bmQiLCJvbmVXZWVrQWdvIiwiYWJhbmRvbmVkQ2hlY2tsaXN0cyIsImFiYW5kb25tZW50UmF0ZSIsInJlc3BvbnNlVGltZSIsImdyb3d0aCIsIm1pbiIsIm1heCIsInJhbmRvbSIsImtwaXMiLCJKU09OIiwic3RyaW5naWZ5Iiwic3RhdHVzRGlzdHJpYnV0aW9uIiwibGFiZWxzIiwiZGF0YXNldHMiLCJkYXRhIiwiYmFja2dyb3VuZENvbG9yIiwibW9udGhOYW1lcyIsImxhc3Q2TW9udGhzIiwiY2hlY2tsaXN0c0J5TW9udGgiLCJBcnJheSIsImZpbGwiLCJpIiwiZCIsInNldE1vbnRoIiwiZ2V0TW9udGgiLCJ1bnNoaWZ0IiwiZm9yRWFjaCIsImRhdGUiLCJtb250aEluZGV4IiwibW9udGhOYW1lIiwiaW5kZXhJbkxhc3Q2IiwiaW5kZXhPZiIsImNoZWNrbGlzdHNDcmVhdGVkQnlNb250aCIsImxhYmVsIiwiYm9yZGVyQ29sb3IiLCJzZXJ2aWNlVHlwZXMiLCJTZXQiLCJtYXAiLCJzZXJ2aWNlVHlwZSIsImNvbXBsZXRpb25SYXRlcyIsInR5cGUiLCJ0eXBlQ2hlY2tsaXN0cyIsInR5cGVUb3RhbCIsInR5cGVDb21wbGV0ZWQiLCJwdXNoIiwic2xpY2UiLCJmbG9vciIsImNvbXBsZXRpb25SYXRlQnlDYXRlZ29yeSIsImNvbXBsZXRpb25SYXRlQnlNb250aCIsIl8iLCJyZXNwb25zZVRpbWVCeVdlZWsiLCJhbmFseXRpY3NEYXRhIiwic3VjY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./pages/api/analytics/data.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalytics%2Fdata&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Canalytics%5Cdata.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();