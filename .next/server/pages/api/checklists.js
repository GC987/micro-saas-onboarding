"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/checklists";
exports.ids = ["pages/api/checklists"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("fs/promises");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchecklists&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cchecklists%5Cindex.js&middlewareConfigBase64=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchecklists&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cchecklists%5Cindex.js&middlewareConfigBase64=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_checklists_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\checklists\\index.js */ \"(api)/./pages/api/checklists/index.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_checklists_index_js__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_checklists_index_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_checklists_index_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_checklists_index_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/checklists\",\n        pathname: \"/api/checklists\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_checklists_index_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmNoZWNrbGlzdHMmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyU1Q2FwaSU1Q2NoZWNrbGlzdHMlNUNpbmRleC5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUMrRDtBQUMvRDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsMkRBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLDJEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCxxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrY2xpZW50Lz8wYjY1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlc1xcXFxhcGlcXFxcY2hlY2tsaXN0c1xcXFxpbmRleC5qc1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2NoZWNrbGlzdHNcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9jaGVja2xpc3RzXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchecklists&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cchecklists%5Cindex.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./data/mockDb.js":
/*!************************!*\
  !*** ./data/mockDb.js ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addEvent: () => (/* binding */ addEvent),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   registerToken: () => (/* binding */ registerToken)\n/* harmony export */ });\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/**\n * Banco de dados simulado para ambiente de demonstração\n * Este arquivo substitui a conexão com o Prisma para facilitar testes sem configurar um banco real\n */ // Armazenamento em memória\nlet recentlyCreatedTokens = [];\n\n\nconst CHECKLISTS_PATH = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\", \"checklists.json\");\nlet checklists = [];\nasync function loadChecklists() {\n    try {\n        const data = await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().readFile(CHECKLISTS_PATH, \"utf-8\");\n        checklists = JSON.parse(data);\n        console.log(\"[MockDB] Checklists carregados do arquivo:\", checklists.length);\n    } catch (err) {\n        console.log(\"[MockDB] N\\xe3o foi poss\\xedvel carregar checklists do arquivo, usando exemplo.\");\n        checklists = [\n            {\n                id: \"cl_exemplo_1\",\n                userId: \"1\",\n                clientName: \"Exemplo Dashboard\",\n                clientEmail: \"exemplo@teste.com\",\n                serviceType: \"Consultoria Web\",\n                status: \"Pendente\",\n                fields: \"{}\",\n                publicToken: \"token_exemplo_1\",\n                createdAt: new Date().toISOString(),\n                responses: null\n            }\n        ];\n        await saveChecklists();\n    }\n}\nasync function saveChecklists() {\n    await fs_promises__WEBPACK_IMPORTED_MODULE_0___default().writeFile(CHECKLISTS_PATH, JSON.stringify(checklists, null, 2));\n}\n// Função auxiliar para verificar se precisamos inicializar com dados padrão\nconst initializeWithDefaultData = ()=>{\n    // Se não há checklists, inicializar com dados de exemplo\n    if (checklists.length === 0) {\n        console.log(\"[MockDB] Sem checklists encontrados, inicializando com dados padr\\xe3o\");\n        const checklistsData = [\n            {\n                id: \"cl_auto_wxdjs167ki\",\n                userId: \"1\",\n                clientName: \"Cliente Auto\",\n                clientEmail: \"cliente@exemplo.com\",\n                serviceType: \"Servi\\xe7o Padr\\xe3o\",\n                status: \"Pendente\",\n                fields: JSON.stringify([\n                    {\n                        label: \"Nome\",\n                        type: \"text\",\n                        required: false\n                    }\n                ]),\n                publicToken: \"wxdjs167ki\",\n                createdAt: new Date().toISOString(),\n                responses: null\n            },\n            {\n                id: \"cl_exemplo_editor\",\n                userId: \"2\",\n                clientName: \"Cliente Editor\",\n                clientEmail: \"cliente-editor@exemplo.com\",\n                serviceType: \"Servi\\xe7o Editor\",\n                status: \"Pendente\",\n                fields: JSON.stringify([\n                    {\n                        label: \"Nome\",\n                        type: \"text\",\n                        required: false\n                    }\n                ]),\n                publicToken: \"editor123token\",\n                createdAt: new Date().toISOString(),\n                responses: null\n            }\n        ];\n        checklists = checklistsData;\n        saveChecklists();\n        console.log(\"[MockDB] Dados padr\\xe3o salvos no arquivo\");\n    }\n};\n// Carregar checklists ao iniciar e garantir dados iniciais\nawait loadChecklists();\ninitializeWithDefaultData();\n// Função auxiliar para adicionar tokens - definida DEPOIS de checklists\nconst addRecentToken = (token)=>{\n    // Verificar se já existe um checklist com este token\n    const exists = checklists.some((c)=>c.publicToken === token);\n    if (!exists && !recentlyCreatedTokens.includes(token)) {\n        recentlyCreatedTokens.push(token);\n        // Criar um checklist falso para este token\n        checklists.push({\n            id: `cl_auto_${Date.now()}`,\n            userId: \"1\",\n            clientName: \"Cliente Auto\",\n            clientEmail: \"cliente@exemplo.com\",\n            serviceType: \"Servi\\xe7o Padr\\xe3o\",\n            status: \"Pendente\",\n            fields: JSON.stringify([\n                {\n                    label: \"Nome\",\n                    type: \"text\",\n                    required: false\n                }\n            ]),\n            publicToken: token,\n            createdAt: new Date().toISOString(),\n            responses: null\n        });\n        console.log(`[MockDB] Token adicionado automaticamente: ${token}`);\n    }\n};\n// Eventos para análise\nlet events = [];\n/**\n * Adiciona um evento ao armazenamento\n * @param {object} event O evento para armazenar\n */ const addEvent = (event)=>{\n    events.push({\n        ...event,\n        id: `evt_${Date.now()}_${Math.floor(Math.random() * 1000)}`\n    });\n    return event;\n};\n// API simulada do Prisma\nconst mockPrisma = {\n    checklist: {\n        findFirst: async ({ where })=>{\n            console.log(\"[MockDB] Buscando checklist\", where);\n            return checklists.find((c)=>{\n                if (where.id) return c.id === where.id;\n                if (where.publicToken) return c.publicToken === where.publicToken;\n                return false;\n            });\n        },\n        findMany: async ({ where })=>{\n            console.log(\"[MockDB] Listando checklists\", where);\n            if (!where) return checklists;\n            return checklists.filter((c)=>{\n                // Filtrar por userId se fornecido - convertendo ambos para string para evitar problemas de tipo\n                if (where.userId) {\n                    const whereUserId = String(where.userId);\n                    const checlistUserId = String(c.userId);\n                    console.log(`[MockDB] Comparando userId: ${checlistUserId} === ${whereUserId} (${checlistUserId === whereUserId})`);\n                    if (checlistUserId !== whereUserId) return false;\n                }\n                // Filtrar por status se fornecido\n                if (where.status && c.status !== where.status) return false;\n                return true;\n            });\n        },\n        create: async ({ data })=>{\n            console.log(\"[MockDB] Criando checklist\", data);\n            // Garantir que userId seja sempre string para consistência\n            const processedData = {\n                ...data,\n                userId: String(data.userId)\n            };\n            const newChecklist = {\n                id: data.id || `cl_${Date.now()}`,\n                ...processedData,\n                createdAt: data.createdAt || new Date().toISOString(),\n                responses: null\n            };\n            checklists.push(newChecklist);\n            await saveChecklists();\n            console.log(`[MockDB] Novo checklist criado com userId: ${newChecklist.userId}`);\n            console.log(`[MockDB] Total de checklists após criação: ${checklists.length}`);\n            console.log(`[MockDB] IDs atuais: ${checklists.map((c)=>c.id).join(\", \")}`);\n            return newChecklist;\n        },\n        update: async ({ where, data })=>{\n            console.log(\"[MockDB] Atualizando checklist\", where, data);\n            const index = checklists.findIndex((c)=>{\n                if (where.id) return c.id === where.id;\n                if (where.publicToken) return c.publicToken === where.publicToken;\n                return false;\n            });\n            if (index === -1) throw new Error(\"Checklist n\\xe3o encontrado\");\n            // Atualizar apenas os campos fornecidos\n            checklists[index] = {\n                ...checklists[index],\n                ...data,\n                updatedAt: new Date().toISOString()\n            };\n            return checklists[index];\n        },\n        delete: async ({ where })=>{\n            console.log(\"[MockDB] Excluindo checklist\", where);\n            const index = checklists.findIndex((c)=>c.id === where.id);\n            if (index === -1) throw new Error(\"Checklist n\\xe3o encontrado\");\n            const deleted = checklists[index];\n            checklists = checklists.filter((c)=>c.id !== where.id);\n            return deleted;\n        }\n    }\n};\n// Função exportada para permitir a importação de novos tokens\nconst registerToken = (token)=>{\n    if (token && typeof token === \"string\") {\n        addRecentToken(token);\n        return true;\n    }\n    return false;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mockPrisma);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./data/mockDb.js\n");

/***/ }),

/***/ "(api)/./pages/api/checklists/index.js":
/*!***************************************!*\
  !*** ./pages/api/checklists/index.js ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _data_mockDb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../data/mockDb */ \"(api)/./data/mockDb.js\");\n/* harmony import */ var _utils_analytics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/analytics */ \"(api)/./utils/analytics.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_data_mockDb__WEBPACK_IMPORTED_MODULE_0__]);\n_data_mockDb__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nasync function handler(req, res) {\n    // GET: Listar checklists do usuário\n    if (req.method === \"GET\") {\n        const { userId } = req.query;\n        if (!userId) return res.status(400).json({\n            error: \"userId obrigat\\xf3rio\"\n        });\n        console.log(`[API][GET] Listando checklists para userId: ${userId}`);\n        try {\n            // Usar mockPrisma ao invés de prisma - garantir que userId seja sempre string\n            const checklists = await _data_mockDb__WEBPACK_IMPORTED_MODULE_0__[\"default\"].checklist.findMany({\n                where: {\n                    userId: String(userId)\n                }\n            });\n            console.log(`[API][GET] Encontrados ${checklists.length} checklists para o usuário ${userId}`);\n            console.log(`[API][GET] IDs dos checklists: ${checklists.map((c)=>c.id).join(\", \")}`);\n            // Deserializa o campo fields de cada checklist\n            const result = checklists.map((checklist)=>({\n                    ...checklist,\n                    fields: JSON.parse(checklist.fields)\n                }));\n            return res.status(200).json(result);\n        } catch (error) {\n            console.error(\"Erro ao listar checklists:\", error);\n            return res.status(500).json({\n                error: \"Erro ao listar checklists\"\n            });\n        }\n    }\n    // POST: Criar novo checklist\n    if (req.method === \"POST\") {\n        const { userId, clientName, clientEmail, serviceType, fields } = req.body;\n        if (!userId || !clientName || !clientEmail || !serviceType || !fields) {\n            return res.status(400).json({\n                error: \"Dados obrigat\\xf3rios ausentes\"\n            });\n        }\n        // Converter userId para string para garantir consistência\n        const userIdStr = String(userId);\n        // Gerar token público único\n        const publicToken = Math.random().toString(36).slice(2, 12);\n        const checklistId = `cl_${Date.now()}`;\n        console.log(`[API][POST] Criando novo checklist: ${checklistId} para userId: ${userIdStr}`);\n        console.log(`[API][POST] Dados: ${clientName}, ${clientEmail}, ${serviceType}, campos: ${fields.length}`);\n        try {\n            // Criar checklist usando mockPrisma\n            const checklist = await _data_mockDb__WEBPACK_IMPORTED_MODULE_0__[\"default\"].checklist.create({\n                data: {\n                    id: checklistId,\n                    userId: userIdStr,\n                    clientName,\n                    clientEmail,\n                    serviceType,\n                    fields: JSON.stringify(fields),\n                    publicToken,\n                    status: \"Pendente\",\n                    createdAt: new Date().toISOString()\n                }\n            });\n            // Registrar evento para análises\n            (0,_utils_analytics__WEBPACK_IMPORTED_MODULE_1__.trackChecklistCreated)(checklist.id, null, userIdStr);\n            // Log para debug\n            console.log(`[API][POST] Checklist ${checklistId} criado com sucesso. Link público: /share/${publicToken}`);\n            // Simulação de envio de e-mail (sem tentar realmente enviar para não causar erros)\n            console.log(`[API][POST] Simulando envio de e-mail para: ${clientEmail}`);\n            console.log(`[API][POST] Assunto: Você tem uma pendência para responder - ${serviceType}`);\n            console.log(`[API][POST] Link no e-mail: ${\"http://localhost:3000\" || 0}/share/${publicToken}`);\n            // Deserializa fields novamente para a resposta\n            const result = {\n                ...checklist,\n                fields: JSON.parse(checklist.fields)\n            };\n            return res.status(201).json(result);\n        } catch (error) {\n            console.error(\"Erro ao criar checklist:\", error);\n            return res.status(500).json({\n                error: \"Erro ao criar checklist\"\n            });\n        }\n    }\n    return res.status(405).json({\n        error: \"M\\xe9todo n\\xe3o permitido\"\n    });\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/checklists/index.js\n");

/***/ }),

/***/ "(api)/./utils/analytics.js":
/*!****************************!*\
  !*** ./utils/analytics.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventTypes: () => (/* binding */ EventTypes),\n/* harmony export */   trackChecklistCreated: () => (/* binding */ trackChecklistCreated),\n/* harmony export */   trackChecklistDeleted: () => (/* binding */ trackChecklistDeleted),\n/* harmony export */   trackChecklistShared: () => (/* binding */ trackChecklistShared),\n/* harmony export */   trackChecklistUpdated: () => (/* binding */ trackChecklistUpdated),\n/* harmony export */   trackChecklistViewed: () => (/* binding */ trackChecklistViewed),\n/* harmony export */   trackEvent: () => (/* binding */ trackEvent),\n/* harmony export */   trackExport: () => (/* binding */ trackExport),\n/* harmony export */   trackResponseAbandoned: () => (/* binding */ trackResponseAbandoned),\n/* harmony export */   trackResponseCompleted: () => (/* binding */ trackResponseCompleted),\n/* harmony export */   trackResponseStarted: () => (/* binding */ trackResponseStarted),\n/* harmony export */   trackResponseUpdated: () => (/* binding */ trackResponseUpdated),\n/* harmony export */   trackTemplateApplied: () => (/* binding */ trackTemplateApplied),\n/* harmony export */   trackTemplateCreated: () => (/* binding */ trackTemplateCreated),\n/* harmony export */   trackUserInvited: () => (/* binding */ trackUserInvited),\n/* harmony export */   trackUserLogin: () => (/* binding */ trackUserLogin),\n/* harmony export */   trackUserSignup: () => (/* binding */ trackUserSignup)\n/* harmony export */ });\n// Sistema de rastreamento de eventos para alimentar análises\n// Registra eventos de uso que serão utilizados para gerar dados de análise\n/**\n * Tipos de eventos que o sistema rastreia\n */ const EventTypes = {\n    // Eventos de checklist\n    CHECKLIST_CREATED: \"checklist_created\",\n    CHECKLIST_UPDATED: \"checklist_updated\",\n    CHECKLIST_DELETED: \"checklist_deleted\",\n    CHECKLIST_SHARED: \"checklist_shared\",\n    CHECKLIST_VIEWED: \"checklist_viewed\",\n    // Eventos de resposta\n    RESPONSE_STARTED: \"response_started\",\n    RESPONSE_UPDATED: \"response_updated\",\n    RESPONSE_COMPLETED: \"response_completed\",\n    RESPONSE_ABANDONED: \"response_abandoned\",\n    // Eventos de usuário\n    USER_LOGIN: \"user_login\",\n    USER_SIGNUP: \"user_signup\",\n    USER_INVITED: \"user_invited\",\n    USER_ACTIVATED: \"user_activated\",\n    // Eventos de template\n    TEMPLATE_APPLIED: \"template_applied\",\n    TEMPLATE_CREATED: \"template_created\",\n    // Eventos de exportação\n    EXPORT_PDF: \"export_pdf\",\n    EXPORT_CSV: \"export_csv\",\n    EXPORT_EXCEL: \"export_excel\"\n};\n/**\n * Registra um evento no sistema de análises\n * @param {string} eventType - Tipo do evento (use EventTypes)\n * @param {object} data - Dados adicionais do evento\n * @param {string} userId - ID do usuário que gerou o evento\n */ async function trackEvent(eventType, data = {}, userId = null) {\n    try {\n        // Se não tivermos ID do usuário, tentamos pegar do localStorage\n        if (!userId && \"undefined\" !== \"undefined\") {}\n        // Dados comuns para todos os eventos\n        const eventData = {\n            eventType,\n            timestamp: new Date().toISOString(),\n            userId,\n            data\n        };\n        // Enviar para a API\n        const response = await fetch(\"/api/analytics/track\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(eventData)\n        });\n        if (!response.ok) {\n            throw new Error(\"Falha ao registrar evento anal\\xedtico\");\n        }\n        return true;\n    } catch (error) {\n        console.error(\"Erro ao rastrear evento:\", error);\n        // Failsafe - não queremos que erros de análise afetem a UX\n        return false;\n    }\n}\n/**\n * Métodos de conveniência para rastrear eventos específicos\n */ // Checklists\nconst trackChecklistCreated = (checklistId, templateId = null, userId = null)=>trackEvent(EventTypes.CHECKLIST_CREATED, {\n        checklistId,\n        templateId\n    }, userId);\nconst trackChecklistUpdated = (checklistId, userId = null)=>trackEvent(EventTypes.CHECKLIST_UPDATED, {\n        checklistId\n    }, userId);\nconst trackChecklistDeleted = (checklistId, userId = null)=>trackEvent(EventTypes.CHECKLIST_DELETED, {\n        checklistId\n    }, userId);\nconst trackChecklistShared = (checklistId, recipientId = null, userId = null)=>trackEvent(EventTypes.CHECKLIST_SHARED, {\n        checklistId,\n        recipientId\n    }, userId);\nconst trackChecklistViewed = (checklistId, userId = null)=>trackEvent(EventTypes.CHECKLIST_VIEWED, {\n        checklistId\n    }, userId);\n// Respostas\nconst trackResponseStarted = (checklistId, respondentId = null, userId = null)=>trackEvent(EventTypes.RESPONSE_STARTED, {\n        checklistId,\n        respondentId\n    }, userId);\nconst trackResponseUpdated = (checklistId, responseId, progress, userId = null)=>trackEvent(EventTypes.RESPONSE_UPDATED, {\n        checklistId,\n        responseId,\n        progress\n    }, userId);\nconst trackResponseCompleted = (checklistId, responseId, timeSpent = null, userId = null)=>trackEvent(EventTypes.RESPONSE_COMPLETED, {\n        checklistId,\n        responseId,\n        timeSpent\n    }, userId);\nconst trackResponseAbandoned = (checklistId, responseId, lastActiveTime = null, userId = null)=>trackEvent(EventTypes.RESPONSE_ABANDONED, {\n        checklistId,\n        responseId,\n        lastActiveTime\n    }, userId);\n// Usuários\nconst trackUserLogin = (userId)=>trackEvent(EventTypes.USER_LOGIN, {}, userId);\nconst trackUserSignup = (userId, referralSource = null)=>trackEvent(EventTypes.USER_SIGNUP, {\n        referralSource\n    }, userId);\nconst trackUserInvited = (invitedEmail, invitedRole, userId = null)=>trackEvent(EventTypes.USER_INVITED, {\n        invitedEmail,\n        invitedRole\n    }, userId);\n// Templates\nconst trackTemplateApplied = (templateId, checklistId, userId = null)=>trackEvent(EventTypes.TEMPLATE_APPLIED, {\n        templateId,\n        checklistId\n    }, userId);\nconst trackTemplateCreated = (templateId, category, userId = null)=>trackEvent(EventTypes.TEMPLATE_CREATED, {\n        templateId,\n        category\n    }, userId);\n// Exports\nconst trackExport = (type, entityId, format, userId = null)=>trackEvent(`EXPORT_${format.toUpperCase()}`, {\n        entityId,\n        entityType: type\n    }, userId);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./utils/analytics.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchecklists&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cchecklists%5Cindex.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();